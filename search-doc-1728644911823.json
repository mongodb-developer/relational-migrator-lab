{"searchDocs":[{"title":"üëê Connect to the Database","type":0,"sectionRef":"#","url":"/relational-migrator-lab/docs/create-project/connect-database","content":"","keywords":"","version":"Next"},{"title":"Select PostgreSQL as Database Type‚Äã","type":1,"pageTitle":"üëê Connect to the Database","url":"/relational-migrator-lab/docs/create-project/connect-database#select-postgresql-as-database-type","content":"   ","version":"Next","tagName":"h2"},{"title":"Enter connection details‚Äã","type":1,"pageTitle":"üëê Connect to the Database","url":"/relational-migrator-lab/docs/create-project/connect-database#enter-connection-details","content":" Enter the details for the PostgreSQL database you will be migrating from.  If your instructors have configured a server for you to use, ask them for the host name, username and password. It's important to click on the SSL tab and active SSL.If you followed the steps to configure PostgreSQL in a docker container, the hostname will be localhost, username postgres and password postgres.  Click Test Connection to ensure your details are correct.  Click Connect to proceed to the next step.   ","version":"Next","tagName":"h2"},{"title":"üëê Define the Initial Schema","type":0,"sectionRef":"#","url":"/relational-migrator-lab/docs/create-project/define-initial-schema","content":"üëê Define the Initial Schema Relational Migrator gives you three options on how your MongoDB schema should be created. Regardless of which option you choose, you can manually modify your schema later. Select Start with a recommended MongoDB schema You are asked which of the tables should represented as a collection in MongoDB. Select the five collections that we want as they are the main Entities in our schema. authorsbooksissue_detialsreviewsusers Any tables you did not check will be embedded in other collections. Click Next, then give your project a name.","keywords":"","version":"Next"},{"title":"üëê Creating a New Project","type":0,"sectionRef":"#","url":"/relational-migrator-lab/docs/create-project/create-new-project","content":"","keywords":"","version":"Next"},{"title":"Click on New Project‚Äã","type":1,"pageTitle":"üëê Creating a New Project","url":"/relational-migrator-lab/docs/create-project/create-new-project#click-on-new-project","content":"   ","version":"Next","tagName":"h2"},{"title":"Select one of the three options‚Äã","type":1,"pageTitle":"üëê Creating a New Project","url":"/relational-migrator-lab/docs/create-project/create-new-project#select-one-of-the-three-options","content":" Click Connect to live database if you are running the origin DB in the cloud, Docker or using your own hardware.Click Load schema from a file if you don't have access to a source database and just want to work with the schema (you won't have any data to import though).Click Use a sample schema to play around with a test schema, without any data. This does not require connecting to a real DB. We won't use this one in this Lab.   ","version":"Next","tagName":"h2"},{"title":"üëê Select Tables","type":0,"sectionRef":"#","url":"/relational-migrator-lab/docs/create-project/select-tables","content":"üëê Select Tables We want to migrate data from all of the tables, so check all of them and then click Next.","keywords":"","version":"Next"},{"title":"üëê Add authors details to the books collection","type":0,"sectionRef":"#","url":"/relational-migrator-lab/docs/edit-mapping-rules/add-mapping-books-authors","content":"üëê Add authors details to the books collection We want to modify the MongoDB schema so that each book contains an array of its authors. In this step we will embed the book details into the empty array created from the join table (which right now only contains authorId and bookId) On the MongoDB diagram view, click the books collectionOn the relational mappings list on the right, click + AddSelect Embedded documentsSelect authors as Source tableIn the advanced settings, check 'Merge fields into parent`Check the id and name fields and uncheck the restClick Save and close info This is a perfect example of the Extended Reference Pattern. When we read a book, we have some of the author's data (name in this case) but we still have the author's id in case we need all the author's attributes (we can then do a join on read using $lookup)","keywords":"","version":"Next"},{"title":"üìò Desired Schema in MongoDB","type":0,"sectionRef":"#","url":"/relational-migrator-lab/docs/desired-schema-mongodb","content":"üìò Desired Schema in MongoDB Since MongoDB is a document database, you have more flexibility in how you model your data. When migrating from a relational database to MongoDB, it's important to consider how your data is accessed, and model the data such that data that is frequently accessed together is stored together by using embedded documents and arrays. The following screenshot shows the MongoDB schema we will be creating in this lab. A few key points: books will contain an array of authors with author id and name for fast retrieval. This is using the Extended Reference Pattern to reference a separate Collection (Authors) but having in books enough information aubout the author.reviews are not included in the books collection as they can grow and become an unbounded array, an atipattern in Schema Design.an author can have several aliases, we just store those strings in an array.","keywords":"","version":"Next"},{"title":"ü¶∏ Add mapping to issueDetails collection (from books table)","type":0,"sectionRef":"#","url":"/relational-migrator-lab/docs/edit-mapping-rules/add-mapping-books-issue-detail","content":"ü¶∏ Add mapping to issueDetails collection (from books table) info Extra activity! Do it if you have extra time or are following along at home. It won't be covered during the hands-on lab. Now we want to store more details from each book into the collection tracking library loans. On the MongoDB diagram view, click the issueDetails collectionOn the relational mappings list on the right, click +AddSelect Embedded documentsSelect books as Source tableCheck the id and title fields and uncheck the restClick Save and close ","keywords":"","version":"Next"},{"title":"ü¶∏ Add mapping to issueDetails collection (from users table)","type":0,"sectionRef":"#","url":"/relational-migrator-lab/docs/edit-mapping-rules/add-mapping-issue-detail-users","content":"ü¶∏ Add mapping to issueDetails collection (from users table) info Extra activity! Do it if you have extra time or are following along at home. It won't be covered during the hands-on lab. Now we want to store more details from each user into the collection tracking library loans. On the MongoDB diagram view, click the issueDetails collectionOn the relational mappings list on the right, click +AddSelect Embedded documentsSelect users as Source tableCheck the id and name fields and uncheck the restClick Save and close","keywords":"","version":"Next"},{"title":"üëê Add aliases to authors","type":0,"sectionRef":"#","url":"/relational-migrator-lab/docs/edit-mapping-rules/edit-mapping-authors-alias","content":"üëê Add aliases to authors We want to modify the MongoDB schema so that each author's aliases are represented as an array of strings. On the MongoDB diagram view, click the authors collectionOn the relational mappings list on the right, click on the edit icon of author_alias embedded array mapping ruleIn the list of fields, uncheck authorIdIn the mapping rule's advanced settings, Check create array of primitive valuesClick Save and close","keywords":"","version":"Next"},{"title":"üëê Remove unused ids from author details in books collection","type":0,"sectionRef":"#","url":"/relational-migrator-lab/docs/edit-mapping-rules/edit-mapping-books-author-book","content":"üëê Remove unused ids from author details in books collection We want to modify the MongoDB schema so that each book contains an array of its authors. In this step we will remove the redundant ID fields from the join table. On the MongoDB diagram view, click the books collectionOn the relational mappings list on the right, click on the edit icon of author_bookEdit the field name from authorBooks to just authorsIn the list of fields, uncheck authorId and bookId, leaving all fields unchecked.Click Save and close What we have now is an implementation of the Extended reference pattern","keywords":"","version":"Next"},{"title":"ü¶∏ Add mapping to reviews collection (from users table)","type":0,"sectionRef":"#","url":"/relational-migrator-lab/docs/edit-mapping-rules/add-mapping-reviews-user","content":"ü¶∏ Add mapping to reviews collection (from users table) info Extra activity! Do it if you have extra time or are following along at home. It won't be covered during the hands-on lab. We want to store each user's name against their reviews. On the MongoDB diagram view, click the reviews collectionOn the relational mappings list on the right, click +AddSelect Embedded documentsSelect users as Source tableIn the advanced settings check Merge fields into the parentOnly check name fieldClick Save and close ","keywords":"","version":"Next"},{"title":"ü¶∏ Edit mapping to authors collection (from author_book table)","type":0,"sectionRef":"#","url":"/relational-migrator-lab/docs/edit-mapping-rules/edit-mapping-authors-authorbook","content":"ü¶∏ Edit mapping to authors collection (from author_book table) info Extra activity! Do it if you have extra time or are following along at home. It won't be covered during the hands-on lab. We want to modify the authors collection to include an array of IDs representing their books. On the MongoDB diagram view, click the authors collectionOn the relational mappings list on the right, click on the edit icon of author_bookEdit the field name from authorBooks to just booksIn the list of fields, uncheck authorId, leaving bookId checkedIn the mapping rule's advanced settings, Check create array of primitive valuesClick Save and close","keywords":"","version":"Next"},{"title":"üëê Add last three reviews to each book (from reviews table)","type":0,"sectionRef":"#","url":"/relational-migrator-lab/docs/edit-mapping-rules/add-mapping-books-reviews","content":"üëê Add last three reviews to each book (from reviews table) We want to modify the MongoDB schema so that each book contains an array of its latest three reviews. info This is an implementation of the Subset Pattern. In this step we will embed the book details into the empty array from the join table. On the MongoDB diagram view, click the books collectionOn the relational mappings list on the right, click + AddSelect Embedded arraySelect reviews as Source tableIn the advanced settings, check Add array conditionsIn Sort by and order option, select timestamp and toggle the order to descendingSet Limit number of rows to 3Uncheck the bookId and leave the rest of the fields checkedClick Save and close Limitations: Continuous Migration Mode will not support this transformationYou will not be able to enable Data Verification when you create the Migration Job.","keywords":"","version":"Next"},{"title":"üëê Clean book attributes up","type":0,"sectionRef":"#","url":"/relational-migrator-lab/docs/edit-mapping-rules/edit-mapping-books-book-attribute","content":"üëê Clean book attributes up We want to clean up the book_attributes array in our MongoDB schema. We want an array of objects containing attributes, modelled a key value pairs. something like: { &quot;_id&quot;: 838383, // book id &quot;attributes&quot;: [ { &quot;key&quot;: &quot;price&quot;, &quot;value&quot;: 11 }, { &quot;key&quot;: &quot;pages&quot;, &quot;value&quot;: 236 }, // ... ] } On the MongoDB diagram view, click the books collectionOn the relational mappings list on the right, click on the edit icon of book_attribute embedded array mapping rule.Change the Field name from bookAttributes to attributesUncheck bookId. We just want all the attributes, which are key/value pairs.Click Save and close info Here we've implemented the Attribute Pattern for MongoDB. This will allow for easy indexing, querying based on attributes and extension of attributes.","keywords":"","version":"Next"},{"title":"üëê Convert SQL queries","type":0,"sectionRef":"#","url":"/relational-migrator-lab/docs/Generate code/convert-queries","content":"üëê Convert SQL queries Relational Migrator can help convert SQL queries to MongoDB Query Language, wrapped in your choice of programming langauge. This feature uses Artifical Intelligence and requires an Atlas account and internet connectivity. At the top, switch to Code Generation tabClick Query ConverterSign into with your MongoDB Atlas accountAccept the Query Converter licence termsClick Paste SQL queryIn the empty query, type SELECT * FROM books WHERE &quot;bookOfTheMonth&quot; = true AND pages &gt; 500Leave the language as JavaScript and click Convert. After a while, the equivalent MongoDB query will be shown at the right of the page.","keywords":"","version":"Next"},{"title":"ü¶∏ Edit mapping to issueDetails collection (from issue_details table)","type":0,"sectionRef":"#","url":"/relational-migrator-lab/docs/edit-mapping-rules/edit-mapping-issue-detail-issue-detail","content":"ü¶∏ Edit mapping to issueDetails collection (from issue_details table) info Extra activity! Do it if you have extra time or are following along at home. It won't be covered during the hands-on lab. Now we want to remove some unncessary id fields from the issueDetails collection On the MongoDB diagram view, click the issueDetails collectionOn the relational mappings list on the right, click on the edit icon of issue_details New Documents mapping ruleUncheck the bookId and userId fields, and leave all other fields checked.Click Save and close","keywords":"","version":"Next"},{"title":"üëê Change genres in books","type":0,"sectionRef":"#","url":"/relational-migrator-lab/docs/edit-mapping-rules/edit-mapping-books-book-genre","content":"üëê Change genres in books We want to modify the MongoDB schema so that each book's genres are represented as an array of strings. We'll have data duplication, as genres will get copied on each book. This is a good strategy if the duplicated data does not change often. We'll go from the proposed array of objects: bookGenres: [ { bookId: &quot;Some Book Id&quot;, genres: &quot;fiction&quot; }, { bookId: &quot;Some Book Id&quot;, genres: &quot;novel&quot; } ] to an array of primitive values genres: [ &quot;fiction&quot;, &quot;novel&quot; ] On the MongoDB diagram view, click the books collectionOn the relational mappings list on the right, click on the edit icon of book_genre embedded arrayChange the field name from bookGenres to genresUncheck bookIdIn the advanced settings, check create array of primitive valuesClick Save and close","keywords":"","version":"Next"},{"title":"üìò Introduction","type":0,"sectionRef":"#","url":"/relational-migrator-lab/docs/intro","content":"üìò Introduction Workshop goals\tMigrate a relational DB into MongoDB AtlasWhat you'll learn\t- What is the MongoDB Relational Migrator? - How to install it - Importing a relational DB: import the schema - Map the relational schema to a MongoDB schema - Migrate the data to MongoDB Prerequisites\tSee Prerequisites Time to complete\t1 hour These labs are meant to be presented by one of our amazing instructors, but you can also do them on your own. In the navigation bar, you will notice some icons. Here is their meaning: Icon\tMeaningüìò\tLecture material - If you're following along in an instructor-led session, they probably have covered this already. üëê\tHands-on content - Get ready to get some work done. You should follow these steps. ü¶∏\tAdvanced content - This content isn't covered during the lab, but if you're interested in learning more, you can check it out.","keywords":"","version":"Next"},{"title":"üëê Generate app code","type":0,"sectionRef":"#","url":"/relational-migrator-lab/docs/Generate code/generate-app-code","content":"üëê Generate app code Relational Migrator allows you to generate application code in a variety of languges, dervied from your MongoDB schema definition. While this code is not production-ready, it can save developers significant time compared to creating entity classes by hand. At the top, switch to Code Generation tabUnder Language, select C#Under Template, select Persistence LayerClick each of the collections in the list. Notice the tabs containing entity classes and CRUD helpers for each collection or embedded object.Under Language, select `JSON'Under Template, select Sample Documents. Notice how you can view examples of how data in each collection will be structured.Under Template, select JSON Schema (MongoDB). Notice how you can view and download JSON Schema validators which could be used to enforce schema compliance.","keywords":"","version":"Next"},{"title":"üëê Convert Views and Stored Procedures","type":0,"sectionRef":"#","url":"/relational-migrator-lab/docs/Generate code/convert-sprocs","content":"üëê Convert Views and Stored Procedures Relational Migrator can import and convert views and stored procedures to MongoDB Query Language, wrapped in your choice of programming langauge. This feature uses Artifical Intelligence and requires an Atlas account and internet connectivity. If needed, open Query Converter and sign in with your Atlas accountClick Manage database objectsEnter the details for your PostgreSQL server and click ConnectCheck all discovered Views and Stored Procedures and click SaveClick one of the imported views or stored proceduresSelect your preferred programming language and click Convert. After a while, the equivalent MongoDB query will be shown at the right of the page. Try some other queries and langauges!","keywords":"","version":"Next"},{"title":"üëê Run a Snapshot Migration Job","type":0,"sectionRef":"#","url":"/relational-migrator-lab/docs/Migrate Data/migration","content":"üëê Run a Snapshot Migration Job At the top, switch to Data Migration tab Click create sync jobSpecify source DB connection details The details will be populated from when you created the project. Specify MongoDB connection details Enter the URI, database, username and password for your MongoDB clusterIf you are using Atlas, you can retrieve the details from the Atlas portal Specify migration options Choose the Drop destination collections before migration option Read migration summary to confirm detailsRun StartMonitor the progress of the job","keywords":"","version":"Next"},{"title":"üëê View Migrated Data","type":0,"sectionRef":"#","url":"/relational-migrator-lab/docs/Migrate Data/view-migrated-data","content":"üëê View Migrated Data Once the job has finished, you can view it in MongoDB. You can perform this task using the mongosh command line tool, MongoDB Compass, or MongoDB Atlas. This topic assumes you have migrated your data to MongoDB Atlas. In a web browser, navigate to the MongoDB Atlas portal and sign in with your accountNavigate to the cloud project containing the cluster you migrated data toSelect your cluster and click View collectionsSelect the database you migrated data toSelect each of the collections and view the documents, confirming they conform to the schema you created.","keywords":"","version":"Next"},{"title":"üëê Project Settings","type":0,"sectionRef":"#","url":"/relational-migrator-lab/docs/project-settings","content":"üëê Project Settings On the top left, click settings iconSelect single inherited primary key. This detects the primary key from the relational schema and sets them as the _id in MongoDBOptionally, toggle Suggested Mappings on and off.","keywords":"","version":"Next"},{"title":"üëê MongoDB Database","type":0,"sectionRef":"#","url":"/relational-migrator-lab/docs/prerequisites/mongodb","content":"","keywords":"","version":"Next"},{"title":"Option 1: New MongoDB Atlas cluster‚Äã","type":1,"pageTitle":"üëê MongoDB Database","url":"/relational-migrator-lab/docs/prerequisites/mongodb#option-1-new-mongodb-atlas-cluster","content":" The easiest way to run MongoDB is to use MongoDB Atlas, our cloud-hosted database offering. You can set a MongoDB Atlas account and a free forever M0 Cluster.  To get yours, follow the instructions on the Intro Lab:  Create your AccountDeploy a Database Cluster  Be sure to open up the cluster to allow connections from your local computer, and configure a database user with the readWriteAnyDatabase role.  ","version":"Next","tagName":"h3"},{"title":"Option 2: Use an existing cluster‚Äã","type":1,"pageTitle":"üëê MongoDB Database","url":"/relational-migrator-lab/docs/prerequisites/mongodb#option-2-use-an-existing-cluster","content":" If you have an existing MongoDB Atlas, Enterprise or Community cluster, you can use it as the migration target. Make sure you know the URI for the cluster, and have a database user with the readWriteAnyDatabase role.  ","version":"Next","tagName":"h3"},{"title":"Option 3: Run a MongoDB container using Docker‚Äã","type":1,"pageTitle":"üëê MongoDB Database","url":"/relational-migrator-lab/docs/prerequisites/mongodb#option-3-run-a-mongodb-container-using-docker","content":" If you don't have an existing PostgreSQL server but have Docker installed, you can easily load a container pre-configured with MongoDB by running the following command:  docker run -p 27017:27017 mongo   This will launch an empty MongoDB community cluster on localhost:27017, suitable to use for this lab. You can connect with no username or password. Since this command does not use Docker volumes, any data will be lost when the container is stopped. ","version":"Next","tagName":"h3"},{"title":"üëê MongoDB Relational Migrator","type":0,"sectionRef":"#","url":"/relational-migrator-lab/docs/prerequisites/relational-migrator","content":"üëê MongoDB Relational Migrator Download and install MongoDB Relational Migrator Now you will need to go to the MongoDB Relational Migrator downloads page, select your OS, download and install it. Once installed, run it and it will be running on a browser at http://127.0.0.1:8278/.","keywords":"","version":"Next"},{"title":"üìò Schema in PostgreSQL","type":0,"sectionRef":"#","url":"/relational-migrator-lab/docs/schema-in-postgresql","content":"üìò Schema in PostgreSQL The following screenshot shows an entity-relationship diagram of the relational database we wish to migrate. This is a library management app that stores information about books, where a book can have many authors, an author can write many books, and users can borrow books and leave reviews. This is the sample schema we use during our Developer Days's Intro Lab.","keywords":"","version":"Next"},{"title":"üëê PostgreSQL Database","type":0,"sectionRef":"#","url":"/relational-migrator-lab/docs/prerequisites/postgres","content":"","keywords":"","version":"Next"},{"title":"Option 1: Use a pre-configured database‚Äã","type":1,"pageTitle":"üëê PostgreSQL Database","url":"/relational-migrator-lab/docs/prerequisites/postgres#option-1-use-a-pre-configured-database","content":" If you are participating in an instructor-led lab, they may have already set up this database for you. Ask your instructor for the connection URI and credentials.  ","version":"Next","tagName":"h3"},{"title":"Option 2: Load the schema and data into your own PostgreSQL server‚Äã","type":1,"pageTitle":"üëê PostgreSQL Database","url":"/relational-migrator-lab/docs/prerequisites/postgres#option-2-load-the-schema-and-data-into-your-own-postgresql-server","content":" If you already have a PostgreSQL server set up, you can import the schema and data used in this lab. Download the file1-library-schema-and-data.sqlfile and load it using psql or pgAdmin.  ","version":"Next","tagName":"h3"},{"title":"Option 3: Run a PostgreSQL container using Docker‚Äã","type":1,"pageTitle":"üëê PostgreSQL Database","url":"/relational-migrator-lab/docs/prerequisites/postgres#option-3-run-a-postgresql-container-using-docker","content":" If you don't have an existing PostgreSQL server but have Docker installed, you can easily load a container pre-configured with PostgreSQL and the sample database:  Clone or download the code from this lab's Github repo.Open a terminal window and navigate to the repo rootBuild the Docker image by running the command:  docker build -f ./docker/sample-postgres-library/Dockerfile -t sample-postgres-library .   Start the Docker container by running the command:  docker run -p 5432:5432 sample-postgres-library   The PostgreSQL server can be accessed at localhost:5432 with a username of postgres and a password of postgres.  ","version":"Next","tagName":"h3"},{"title":"Option 4: Load an SQL file‚Äã","type":1,"pageTitle":"üëê PostgreSQL Database","url":"/relational-migrator-lab/docs/prerequisites/postgres#option-4-load-an-sql-file","content":" Choose this option if you just want a quick hands-on experience and you don't need to run actual migration. Download the file library-schema.sqland upload this file to the Relational Migrator later, at the create a project step.  This is just the schema of the database, without actual data, so, you will not be able to perform an actual migration since you do not have a source database. But you can model the schema and play around with the Relational Migrator. ","version":"Next","tagName":"h3"},{"title":"üéØ Summary","type":0,"sectionRef":"#","url":"/relational-migrator-lab/docs/summary","content":"üéØ Summary Congratulations! Following this tutorial, you have successfully: Installed Relational Migrator.Created a migration project.Mapped a relational schema to MongoDB.Migrated data to MongoDB.Generated application code from the MongoDB model.Converted SQL queries and stored procedures to MongoDB query language. Visit the MongoDB Developer Center for more useful information and tutorials.","keywords":"","version":"Next"},{"title":"üëê Toggle View","type":0,"sectionRef":"#","url":"/relational-migrator-lab/docs/toggle-view","content":"üëê Toggle View At the bottom left, toggle between different views, we should be looking at the MDB view most of the time.","keywords":"","version":"Next"}],"options":{"id":"default"}}