{"searchDocs":[{"title":"üëê Connect to the Database","type":0,"sectionRef":"#","url":"/relational-migrator-lab/docs/create-project/connect-database","content":"","keywords":"","version":"Next"},{"title":"Add a new connection‚Äã","type":1,"pageTitle":"üëê Connect to the Database","url":"/relational-migrator-lab/docs/create-project/connect-database#add-a-new-connection","content":" We can store the credentials of our database so in the next session we can connect quickly. In this case, we'll create a new connection selecting &quot;Add a new connection&quot;.  ","version":"Next","tagName":"h2"},{"title":"Select PostgreSQL as Database Type‚Äã","type":1,"pageTitle":"üëê Connect to the Database","url":"/relational-migrator-lab/docs/create-project/connect-database#select-postgresql-as-database-type","content":" Then we'll select PostgreSQL as our source database.    ","version":"Next","tagName":"h2"},{"title":"Enter connection details‚Äã","type":1,"pageTitle":"üëê Connect to the Database","url":"/relational-migrator-lab/docs/create-project/connect-database#enter-connection-details","content":" Enter the details for the PostgreSQL database you will be migrating from.  It's important to click on the SSL tab and activate SSL (SSL mode Prefer is fine), otherwise we won't be able to connect to cloud hosted databases.If your instructors have configured a server for you to use, ask them for the host name, username and password.Database name should be &quot;library&quot;Click Test Connection to ensure your details are correct.Click Connect to proceed to the next step.You can give your connection a name and a tag to make it simpler to remember later    info ü¶∏‚Äç‚ôÇÔ∏è If you have followed the steps to configure PostgreSQL in a docker container, the hostname will be localhost, username postgres and password postgres. ","version":"Next","tagName":"h2"},{"title":"üëê Define the Initial Schema","type":0,"sectionRef":"#","url":"/relational-migrator-lab/docs/create-project/define-initial-schema","content":"üëê Define the Initial Schema Relational Migrator gives you three options on how your MongoDB schema should be created. Regardless of which option you choose, you can manually modify your schema later. Select Start with a recommended MongoDB schema You are asked which tables should represented as a collection in MongoDB. Select the following five collections as they are the main entities in our schema: authorsbookslanguagesoperationsreviewsusers Any tables you did not check will be embedded in other collections. Select the casing you'd like for your collections - the default is camelCase. Click Next, then give your project a name.","keywords":"","version":"Next"},{"title":"üëê Select Tables","type":0,"sectionRef":"#","url":"/relational-migrator-lab/docs/create-project/select-tables","content":"üëê Select Tables We want to migrate data from all of the tables, so check all of them (just check the library database) and then click Next. tip In a real project, you can select just a handful tables in case you're not interested in the whole database.","keywords":"","version":"Next"},{"title":"üìò Desired Schema in MongoDB","type":0,"sectionRef":"#","url":"/relational-migrator-lab/docs/desired-schema-mongodb","content":"üìò Desired Schema in MongoDB Since MongoDB is a document database, you have more flexibility in how you model your data. When migrating from a relational database to MongoDB, it's important to consider how your data is accessed, and model the data such that data that is frequently accessed together is stored together by using embedded documents and arrays. The following screenshot shows the MongoDB schema we will be creating in this lab. A few key points: Books will contain an array of authors with author id and name for fast retrieval. This is using the Extended Reference pattern to reference a separate collection (Authors) but having in books enough information about the author.Reviews are not included in the books collection as they can grow and become an unbounded array, an antipattern in schema design.An author can have several aliases. We just store those strings in an array.","keywords":"","version":"Next"},{"title":"üëê Creating a New Project","type":0,"sectionRef":"#","url":"/relational-migrator-lab/docs/create-project/create-new-project","content":"","keywords":"","version":"Next"},{"title":"Click on New Project‚Äã","type":1,"pageTitle":"üëê Creating a New Project","url":"/relational-migrator-lab/docs/create-project/create-new-project#click-on-new-project","content":"   ","version":"Next","tagName":"h2"},{"title":"Select one of the three options‚Äã","type":1,"pageTitle":"üëê Creating a New Project","url":"/relational-migrator-lab/docs/create-project/create-new-project#select-one-of-the-three-options","content":" üëê Click Connect database under &quot;Connect to live database&quot; if you are running the source database in the cloud, Docker or using your own hardware.ü¶∏‚Äç‚ôÇÔ∏è Click Import .SQL file under &quot;Load schema from a file&quot; if you don't have access to a source database and just want to work with the schema (you won't have any data to import though).ü¶∏‚Äç‚ôÇÔ∏è Click Create sample under &quot;Use a sample schema&quot; to play around with a test schema, without any data. This does not require connecting to a real DB. We won't use this one in this Lab.   ","version":"Next","tagName":"h2"},{"title":"ü¶∏ Embed book information in operations","type":0,"sectionRef":"#","url":"/relational-migrator-lab/docs/edit-mapping-rules/add-mapping-books-issue-detail","content":"ü¶∏ Embed book information in operations info Extra activity! Do it if you have extra time or are following along at home. It won't be covered during the hands-on lab. Now we want to store more details from each book into the collection tracking library loans. On the MongoDB diagram view, click on the operations collection.On the relational mappings list on the right, click +Add.Select Embedded documents.Select books as Source table.Check the id and title fields and uncheck the rest.Click Save and close.","keywords":"","version":"Next"},{"title":"üëê Add authors details to the books collection","type":0,"sectionRef":"#","url":"/relational-migrator-lab/docs/edit-mapping-rules/add-mapping-books-authors","content":"","keywords":"","version":"Next"},{"title":"üëê Add author name to the books collection‚Äã","type":1,"pageTitle":"üëê Add authors details to the books collection","url":"/relational-migrator-lab/docs/edit-mapping-rules/add-mapping-books-authors#-add-author-name-to-the-books-collection","content":" We want to modify the MongoDB schema so that each book contains an array of its authors. Right now in the authorBooks mapping we're getting the authorId for the current book, but we want also the name of the author. So in this step we will embed the author name into array created from the mapping of the join table (which right now only contains authorId and bookId)  On the MongoDB diagram view, click the books collectionOn the relational mappings list on the right, click + AddSelect Embedded documentsSelect authors as Source tableIn the advanced settings, check 'Merge fields into parent`Check the name field and uncheck the restClick Save and close    ","version":"Next","tagName":"h2"},{"title":"üëê Remove unneeded bookId from author details in books collection‚Äã","type":1,"pageTitle":"üëê Add authors details to the books collection","url":"/relational-migrator-lab/docs/edit-mapping-rules/add-mapping-books-authors#-remove-unneeded-bookid-from-author-details-in-books-collection","content":" We want to modify the MongoDB schema so that each book contains an array of its authors. In this step we will remove the redundant ID fields from the join table.  On the MongoDB diagram view, click the books collection.On the relational mappings list on the right, click on the edit icon of author_book.Edit the field name from authorBooks to just authors.In the list of fields, uncheck bookId.Click Save and close.  This results in our authors array looking like:   &quot;authors&quot;: [ { &quot;authorId&quot;: 8282, &quot;name&quot;: &quot;Cervantes&quot; }, ... ]     info This is a perfect example of the Extended Reference Pattern. When we read a book, we have some of the author's data (name in this case) but we still have the author's id in case we need all the author's attributes (we can then do a join on read using $lookup) ","version":"Next","tagName":"h2"},{"title":"üëê Add last three reviews to each book (from reviews table)","type":0,"sectionRef":"#","url":"/relational-migrator-lab/docs/edit-mapping-rules/add-mapping-books-reviews","content":"üëê Add last three reviews to each book (from reviews table) We want to modify the MongoDB schema so that each book contains an array of its latest three reviews. info This is an implementation of the Subset Pattern. In this step we will embed the book details into the empty array from the join table. On the MongoDB diagram view, click the books collection.On the relational mappings list on the right, click + Add.Select Embedded array.Select reviews as Source table.In the advanced settings, check Add array conditions.In Sort by and order option, select timestamp and toggle the order to descending.Set Limit number of rows to 3.Uncheck the bookId and leave the rest of the fields checked.Click Save and close. Limitations: Continuous Migration Mode will not support this transformationYou will not be able to enable Data Verification when you create the Migration Job.","keywords":"","version":"Next"},{"title":"ü¶∏ Add user's names to reviews","type":0,"sectionRef":"#","url":"/relational-migrator-lab/docs/edit-mapping-rules/add-mapping-reviews-user","content":"ü¶∏ Add user's names to reviews info Extra activity! Do it if you have extra time or are following along at home. It won't be covered during the hands-on lab. We want to store each user's name against their reviews. On the MongoDB diagram view, click the reviews collection.On the relational mappings list on the right, click +Add.Select Embedded documents.Select users as Source table.In the advanced settings check Merge fields into the parent.Only check name field.Click Save and close.","keywords":"","version":"Next"},{"title":"üëê Edit author's aliases array","type":0,"sectionRef":"#","url":"/relational-migrator-lab/docs/edit-mapping-rules/edit-mapping-authors-alias","content":"üëê Edit author's aliases array We want to modify the MongoDB schema so that each author's aliases are represented as an array of strings. On the MongoDB diagram view, click on the authors collection.On the relational mappings list on the right, click on the edit icon of author_alias embedded array mapping rule.In the list of fields, uncheck authorId.In the mapping rule's advanced settings, Check create array of primitive values.Click Save and close.","keywords":"","version":"Next"},{"title":"ü¶∏ Simplify the books array in the authors collection","type":0,"sectionRef":"#","url":"/relational-migrator-lab/docs/edit-mapping-rules/edit-mapping-authors-authorbook","content":"ü¶∏ Simplify the books array in the authors collection info Extra activity! Do it if you have extra time or are following along at home. It won't be covered during the hands-on lab. We want to modify the authors collection so the array of books include just the bookId. On the MongoDB diagram view, click the authors collection.On the relational mappings list on the right, click on the edit icon of author_book.Edit the field name from authorBooks to just books.In the list of fields, uncheck authorId, leaving bookId checked.In the mapping rule's advanced settings, Check create array of primitive values.Click Save and close.","keywords":"","version":"Next"},{"title":"ü¶∏ Embed user information in operations","type":0,"sectionRef":"#","url":"/relational-migrator-lab/docs/edit-mapping-rules/add-mapping-issue-detail-users","content":"ü¶∏ Embed user information in operations info Extra activity! Do it if you have extra time or are following along at home. It won't be covered during the hands-on lab. Now we want to store more details from each user into the collection tracking library loans. On the MongoDB diagram view, click the operations collection.On the relational mappings list on the right, click +Add.Select Embedded documents.Select users as Source table.Check the id and name fields and uncheck the rest.Click Save and close.","keywords":"","version":"Next"},{"title":"üëê Clean up book attributes","type":0,"sectionRef":"#","url":"/relational-migrator-lab/docs/edit-mapping-rules/edit-mapping-books-book-attribute","content":"üëê Clean up book attributes We want to clean up the bookAttributes array in our MongoDB schema. We want an array of objects containing attributes, modelled as key value pairs. something like: { &quot;_id&quot;: 838383, // book id &quot;attributes&quot;: [ { &quot;key&quot;: &quot;price&quot;, &quot;value&quot;: 11 }, { &quot;key&quot;: &quot;pages&quot;, &quot;value&quot;: 236 }, // ... ] } On the MongoDB diagram view, click on the books collection.On the relational mappings list on the right, click on the edit icon of book_attribute embedded array mapping rule.Change the Field name from bookAttributes to attributes.Uncheck bookId. We just want all the attributes, which are key/value pairs. Also, as we're embedded inside books, we don't need the bookId anymore.Click Save and close. info Here we've implemented the Attribute Pattern for MongoDB. This will allow for easy indexing, querying based on attributes and extension of attributes.","keywords":"","version":"Next"},{"title":"üëê Change genres in books","type":0,"sectionRef":"#","url":"/relational-migrator-lab/docs/edit-mapping-rules/edit-mapping-books-book-genre","content":"üëê Change genres in books We want to modify the MongoDB schema so that each book's genres are represented as an array of strings. We'll have data duplication, as genres will get copied on each book. This is a good strategy if the duplicated data does not change often. We'll go from the proposed array of objects: bookGenres: [ { &quot;bookId&quot;: &quot;Some Book Id&quot;, &quot;genres&quot;: &quot;fiction&quot; }, { &quot;bookId&quot;: &quot;Some Book Id&quot;, &quot;genres&quot;: &quot;novel&quot; } ] to an array of genres: [ { &quot;name&quot;: &quot;fiction&quot; }, { &quot;name&quot; :&quot;novel&quot; } ] On the MongoDB diagram view, click the books collection.Click on the edit edit icon of genres. Deselect id, This is a child relationship of bookGenres, and we'll merge these fields into the parent, to avoid too much unneccesary nesting.Click Save and close.Click on the edit icon of the book_genre embedded array.Change the field name from bookGenres to genres.Uncheck bookId and genreId.Click Save and close.","keywords":"","version":"Next"},{"title":"ü¶∏ Remove unnecessary ids from operations","type":0,"sectionRef":"#","url":"/relational-migrator-lab/docs/edit-mapping-rules/edit-mapping-issue-detail-issue-detail","content":"ü¶∏ Remove unnecessary ids from operations info Extra activity! Do it if you have extra time or are following along at home. It won't be covered during the hands-on lab. Now we want to remove some unncessary id fields from the operations collection. We have bookId and userId but we also have these values in the embedded book and user fields. On the MongoDB diagram view, click the operations collection.On the relational mappings list on the right, click on the edit icon of opperations New Documents mapping rule.Uncheck the bookId and userId fields, and leave all other fields checked.Click Save and close.","keywords":"","version":"Next"},{"title":"üëê Convert SQL queries","type":0,"sectionRef":"#","url":"/relational-migrator-lab/docs/Generate code/convert-queries","content":"üëê Convert SQL queries Relational Migrator can help convert SQL queries to MongoDB Query Language, wrapped in your choice of programming langauge. This feature uses Artifical Intelligence and requires an Atlas account and internet connectivity. At the top, switch to Code Generation tabClick Query ConverterSign into your MongoDB Atlas accountAccept the Query Converter licence termsClick Paste SQL queryIn the empty query, type SELECT * FROM books WHERE &quot;bookOfTheMonth&quot; = true AND pages &gt; 500Leave the language as JavaScript and click Convert. After a while, the equivalent MongoDB query will be shown at the right of the page.","keywords":"","version":"Next"},{"title":"ü¶∏ Clean Users address data","type":0,"sectionRef":"#","url":"/relational-migrator-lab/docs/edit-mapping-rules/users-addresses","content":"ü¶∏ Clean Users address data info Extra activity! Do it if you have extra time or are following along at home. It won't be covered during the hands-on lab. The array that holds user addresses has a lot of unneeded data. On the MongoDB diagram view, click on the users collection.Click on the edit edit icon of user_addresses Embedded array.Change the field name from userAddresses to addresses.Deselect id, userId and cityId.Click Save and close Click on the edit edit icon of cities, which is an embedded document inside the array addresses.Deselect id and countryId.Rename the name field into cityName.In the advanced settings, check 'Merge fields into parent`.Click Save and close.On the relational mappings list on the right, click +Add.Select Embedded documents.Select countries as Source table.In the advanced settings check Merge fields into the parent.Only check name field, renaming the name field into countryName.Click Save and close.","keywords":"","version":"Next"},{"title":"üëê Convert Views and Stored Procedures","type":0,"sectionRef":"#","url":"/relational-migrator-lab/docs/Generate code/convert-sprocs","content":"üëê Convert Views and Stored Procedures Relational Migrator can import and convert views and stored procedures to MongoDB Query Language, wrapped in your choice of programming langauge. This feature uses Artifical Intelligence and requires an Atlas account and internet connectivity. If needed, open Query Converter and sign in with your Atlas account.Click on the Add button, the Import from database.Check all Views and Stored Procedures and click Save.Click one of the imported views or stored proceduresSelect your preferred programming language and click Convert. After a while, the equivalent MongoDB query will be shown at the right of the page. Try some other queries and langauges!","keywords":"","version":"Next"},{"title":"üëê Generate app code","type":0,"sectionRef":"#","url":"/relational-migrator-lab/docs/Generate code/generate-app-code","content":"üëê Generate app code The Relational Migrator allows you to generate application code in a variety of languages, derived from your MongoDB schema definition. While this code is not a full-blown app, it can save developers significant time compared to creating entity classes by hand. At the top, switch to Code Generation tabUnder Language, select C# (or your preferred language)Under Template, select Persistence LayerClick each of the collections in the list. Notice the tabs containing entity classes and CRUD helpers for each collection or embedded object.Under Language, select `JSON'Under Template, select Sample Documents. Notice how you can view examples of how data in each collection will be structured.Under Template, select JSON Schema (MongoDB). Notice how you can view and download JSON Schema validators which could be used to enforce schema compliance.","keywords":"","version":"Next"},{"title":"üìò Introduction","type":0,"sectionRef":"#","url":"/relational-migrator-lab/docs/intro","content":"üìò Introduction Workshop goals\tMigrate a relational DB into MongoDB AtlasWhat you'll learn\t- What is the MongoDB Relational Migrator? - How to install it - Importing a relational DB: import the schema - Map the relational schema to a MongoDB schema - Migrate the data to MongoDB Prerequisites\tSee Prerequisites Time to complete\t1 hour These labs are meant to be presented by one of our amazing instructors, but you can also do them on your own. In the navigation bar, you will notice some icons. Here is their meaning: Icon\tMeaningüìò\tLecture material - If you're following along in an instructor-led session, they probably have covered this already. üëê\tHands-on content - Get ready to get some work done. You should follow these steps. ü¶∏\tAdvanced content - This content isn't covered during the lab, but if you're interested in learning more, you can check it out.","keywords":"","version":"Next"},{"title":"ü¶∏ Testing Converted Queries","type":0,"sectionRef":"#","url":"/relational-migrator-lab/docs/Generate code/testing-queries","content":"","keywords":"","version":"Next"},{"title":"Prerequisite‚Äã","type":1,"pageTitle":"ü¶∏ Testing Converted Queries","url":"/relational-migrator-lab/docs/Generate code/testing-queries#prerequisite","content":" In order for Relational Migrator to run converted queries, you need to first install and run Query Runner. The MongoDB query will be executed on your actual MongoDB database, so you must have completed migrating your data. If you source data resides in the public schema in your PostgreSQL database, you may skip this step. Otherwise, you will need to add your source data schema into PostgreSQL's search path in order for the queries execute properly. Go to Manage Connections: Edit your JDBC URI to include the search path. For example, if your source schema is library, add options=-c%20search_path%3Dlibrary as a query parameter to your URI: Click Save and you can use the browser's back button to navigate back to the Query Converter page. After which, you may expand the test query panel to begin executing your source query or converted query.  ","version":"Next","tagName":"h2"},{"title":"Executing queries for comparison‚Äã","type":1,"pageTitle":"ü¶∏ Testing Converted Queries","url":"/relational-migrator-lab/docs/Generate code/testing-queries#executing-queries-for-comparison","content":" Select the source query you want to test on the left pane. As an example, we will select the get_books_by_genre stored procedure.Convert the query to a MongoDB query if you have not done so, but note that the converted query may not always be correct.If it is a stored procedure, you will need to replace the placeholder parameter with a test value. In this example, we will replace it with 'Literature'. Click RUN SOURCE QUERY and RUN CONVERTED QUERY to execute the queries and compare the results. If the query results are different, check your MongoDB query. In this example, your MongoDB query should look like: async function get_books_by_genre(db, genre_param) { const result = await db.collection('books').aggregate([ { $match: { 'genre': genre_param } }, { $project: { title: 1 } } ]).toArray(); return result; } Also check that any changes your made to your MongoDB query are saved. ","version":"Next","tagName":"h2"},{"title":"ü¶∏ Migration using CDC and Kafka","type":0,"sectionRef":"#","url":"/relational-migrator-lab/docs/Migrate Data/cdc-migration","content":"ü¶∏ Migration using CDC and Kafka info Extra activity! Do it if you have extra time or are following along at home. It won't be covered during the hands-on lab. Check out this post The Great Continuous Migration: CDC Jobs With Confluent Cloud and Relational Migrator","keywords":"","version":"Next"},{"title":"üëê View Migrated Data","type":0,"sectionRef":"#","url":"/relational-migrator-lab/docs/Migrate Data/view-migrated-data","content":"üëê View Migrated Data Once the job has finished, you can view it in MongoDB. You can perform this task using the mongosh command line tool, MongoDB Compass, or MongoDB Atlas. This topic assumes you have migrated your data to MongoDB Atlas. In a web browser, navigate to the MongoDB Atlas portal and sign in with your accountNavigate to the cloud project containing the cluster you migrated data toSelect your cluster and click View collectionsSelect the database you migrated data toSelect each of the collections and view the documents, confirming they conform to the schema you created.","keywords":"","version":"Next"},{"title":"üëê MongoDB Relational Migrator","type":0,"sectionRef":"#","url":"/relational-migrator-lab/docs/prerequisites/relational-migrator","content":"üëê MongoDB Relational Migrator Download and install MongoDB Relational Migrator. Go to the MongoDB Relational Migrator downloads page, select your OS and download itInstall the MongoDB Relational MigratorStart itIt should open a browser at the address http://127.0.0.1:8278/ info There are more advanced ways to install the MongoDB Relational Migrator. You can check them out in the installation docs page. These won't be covered during this Lab.","keywords":"","version":"Next"},{"title":"üëê Run a Snapshot Migration Job","type":0,"sectionRef":"#","url":"/relational-migrator-lab/docs/Migrate Data/migration","content":"üëê Run a Snapshot Migration Job At the top, switch to Data Migration tab Click create sync jobSpecify source DB connection details The details will be populated from when you created the project. Specify MongoDB connection details Enter the URI, database, username and password for your MongoDB clusterIf you are using Atlas, you can retrieve the details from the Atlas portal Specify migration options Choose the Drop destination collections before migration option Read migration summary to confirm detailsRun StartMonitor the progress of the job","keywords":"","version":"Next"},{"title":"üëê MongoDB Database","type":0,"sectionRef":"#","url":"/relational-migrator-lab/docs/prerequisites/mongodb","content":"","keywords":"","version":"Next"},{"title":"üëê Option 1: New MongoDB Atlas cluster‚Äã","type":1,"pageTitle":"üëê MongoDB Database","url":"/relational-migrator-lab/docs/prerequisites/mongodb#-option-1-new-mongodb-atlas-cluster","content":" The easiest way to run MongoDB is to use MongoDB Atlas, our cloud-hosted database offering. You can set a MongoDB Atlas account and a free forever M0 Cluster.  To get yours, follow the instructions on the Intro Lab:  Create your AccountDeploy a Database Cluster  Be sure to open up the cluster to allow connections from your local computer, and configure a database user with the readWriteAnyDatabase role.  info In an intructor-led lab you will use an Atlas Cluster  ","version":"Next","tagName":"h2"},{"title":"ü¶∏ Option 2: Use an existing cluster‚Äã","type":1,"pageTitle":"üëê MongoDB Database","url":"/relational-migrator-lab/docs/prerequisites/mongodb#-option-2-use-an-existing-cluster","content":" If you have an existing MongoDB Atlas, Enterprise or Community cluster, you can use it as the migration target. Make sure you know the URI for the cluster, and have a database user with the readWriteAnyDatabase role.  ","version":"Next","tagName":"h2"},{"title":"ü¶∏ Option 3: Run a MongoDB container using Docker‚Äã","type":1,"pageTitle":"üëê MongoDB Database","url":"/relational-migrator-lab/docs/prerequisites/mongodb#-option-3-run-a-mongodb-container-using-docker","content":" If you don't have an existing MongoDB server but have Docker installed, you can easily load a container pre-configured with MongoDB by running the following command:  docker run -p 27017:27017 mongo   This will launch an empty MongoDB community cluster on localhost:27017, suitable to use for this lab. You can connect with no username or password. Since this command does not use Docker volumes, any data will be lost when the container is stopped. ","version":"Next","tagName":"h2"},{"title":"üëê PostgreSQL Database","type":0,"sectionRef":"#","url":"/relational-migrator-lab/docs/prerequisites/postgres","content":"","keywords":"","version":"Next"},{"title":"üëê Option 1: Use a pre-configured database‚Äã","type":1,"pageTitle":"üëê PostgreSQL Database","url":"/relational-migrator-lab/docs/prerequisites/postgres#-option-1-use-a-pre-configured-database","content":" If you are participating in an instructor-led lab, they may have already set up this database for you. Ask your instructor for the connection URI and credentials.  info In an intructor-led lab you will use the provisioned PostgreSQL database, no need to do anything else.  ","version":"Next","tagName":"h2"},{"title":"ü¶∏ Option 2: Load the schema and data into your own PostgreSQL server‚Äã","type":1,"pageTitle":"üëê PostgreSQL Database","url":"/relational-migrator-lab/docs/prerequisites/postgres#-option-2-load-the-schema-and-data-into-your-own-postgresql-server","content":" If you already have a PostgreSQL server set up, you can import the schema and data used in this lab. Download the file1-library-schema-and-data.sqland load it using psql or pgAdmin.  ","version":"Next","tagName":"h2"},{"title":"ü¶∏ Option 3: Run a PostgreSQL container using Docker‚Äã","type":1,"pageTitle":"üëê PostgreSQL Database","url":"/relational-migrator-lab/docs/prerequisites/postgres#-option-3-run-a-postgresql-container-using-docker","content":" If you don't have an existing PostgreSQL server but have Docker installed, you can easily load a container pre-configured with PostgreSQL and the sample database:  Clone or download the code from this lab's Github repo.Open a terminal window and navigate to the repo root.Build the Docker image by running the command:  docker build -f ./docker/sample-postgres-library/Dockerfile -t sample-postgres-library .   Start the Docker container by running the command:  docker run -p 5432:5432 sample-postgres-library   The PostgreSQL server can be accessed at localhost:5432 with a username of postgres and a password of postgres.  ","version":"Next","tagName":"h2"},{"title":"ü¶∏ Option 4: Load a SQL file‚Äã","type":1,"pageTitle":"üëê PostgreSQL Database","url":"/relational-migrator-lab/docs/prerequisites/postgres#-option-4-load-a-sql-file","content":" Choose this option if you just want a quick hands-on experience and you don't need to run an actual migration. Download the file library-schema.sqland upload this file to the Relational Migrator later, at the create a project step.  This is just the schema of the database, without actual data, so, you will not be able to perform an actual migration since you do not have a source database. But you can model the schema and play around with the Relational Migrator. ","version":"Next","tagName":"h2"},{"title":"üëê Project Settings","type":0,"sectionRef":"#","url":"/relational-migrator-lab/docs/project-settings","content":"üëê Project Settings On the top left, click the settings icon.Select single inherited primary key. This detects the primary key from the relational schema and sets them as the _id in MongoDB.Optionally, toggle Suggested Mappings on and off. info If we don't do this we'll have both an autogenerated _id field of type ObjectId and a id field copied from the relational DB.","keywords":"","version":"Next"},{"title":"üìò Schema in PostgreSQL","type":0,"sectionRef":"#","url":"/relational-migrator-lab/docs/schema-in-postgresql","content":"üìò Schema in PostgreSQL The following screenshot shows an entity-relationship diagram of the relational database we wish to migrate. This is a library management app that stores information about books, where a book can have many authors, an author can write many books, and users can borrow books and leave reviews. You can have many copies of the same book and those are what users borrow and return. All this is registered in the operations collection. A library user can have many addresses. This is the sample schema we use during our Developer Days's Intro Lab. Click to enlarge in a new tab / window","keywords":"","version":"Next"},{"title":"üëê Toggle View","type":0,"sectionRef":"#","url":"/relational-migrator-lab/docs/toggle-view","content":"üëê Toggle View At the bottom left, toggle between different views. We should be looking at the MDB view most of the time.","keywords":"","version":"Next"},{"title":"üéØ Summary","type":0,"sectionRef":"#","url":"/relational-migrator-lab/docs/summary","content":"üéØ Summary Congratulations! Following this tutorial, you have successfully: Installed Relational Migrator.Created a migration project.Mapped a relational schema to MongoDB.Migrated data to MongoDB.Generated application code from the MongoDB model.Converted SQL queries and stored procedures to MongoDB query language. Visit the MongoDB Developer Center for more useful information and tutorials.","keywords":"","version":"Next"}],"options":{"id":"default"}}