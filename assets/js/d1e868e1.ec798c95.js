"use strict";(self.webpackChunkrelational_migrator_lab=self.webpackChunkrelational_migrator_lab||[]).push([["9496"],{3498:function(e,n,o){o.r(n),o.d(n,{default:()=>p,frontMatter:()=>r,metadata:()=>s,assets:()=>c,toc:()=>d,contentTitle:()=>l});var s=JSON.parse('{"id":"edit-mapping-rules/edit-mapping-books-book-genre","title":"\uD83D\uDC50 Change genres in books","description":"We want to modify the MongoDB schema so that each book\'s genres are represented as an array of strings. We\'ll have data duplication, as genres will get copied on each book. This is a good strategy if the duplicated data does not change often.","source":"@site/docs/80-edit-mapping-rules/20-edit-mapping-books-book-genre.mdx","sourceDirName":"80-edit-mapping-rules","slug":"/edit-mapping-rules/edit-mapping-books-book-genre","permalink":"/relational-migrator-lab/docs/edit-mapping-rules/edit-mapping-books-book-genre","draft":false,"unlisted":false,"editUrl":"https://github.com/mongodb-developer/relational-migrator-lab/blob/main/docs/80-edit-mapping-rules/20-edit-mapping-books-book-genre.mdx","tags":[],"version":"current","sidebarPosition":20,"frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"\uD83D\uDC50 Clean up book attributes","permalink":"/relational-migrator-lab/docs/edit-mapping-rules/edit-mapping-books-book-attribute"},"next":{"title":"\uD83D\uDC50 Add authors details to the books collection","permalink":"/relational-migrator-lab/docs/edit-mapping-rules/add-mapping-books-authors"}}'),a=o("5893"),t=o("65"),i=o("600");let r={},l="\uD83D\uDC50 Change genres in books",c={},d=[];function h(e){let n={code:"code",h1:"h1",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,t.a)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.header,{children:(0,a.jsx)(n.h1,{id:"-change-genres-in-books",children:"\uD83D\uDC50 Change genres in books"})}),"\n",(0,a.jsx)(n.p,{children:"We want to modify the MongoDB schema so that each book's genres are represented as an array of strings. We'll have data duplication, as genres will get copied on each book. This is a good strategy if the duplicated data does not change often."}),"\n",(0,a.jsx)(n.p,{children:"We'll go from the proposed array of objects:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-json",children:'bookGenres: [\n    {\n        "bookId": "Some Book Id",\n        "genres": "fiction"\n    },\n    {\n        "bookId": "Some Book Id",\n        "genres": "novel"\n    }\n]\n'})}),"\n",(0,a.jsx)(n.p,{children:"to an array of"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-json",children:'genres: [ \n    { "name": "fiction" }, \n    { "name" :"novel" } \n]\n'})}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:["On the MongoDB diagram view, click the ",(0,a.jsx)(n.code,{children:"books"})," collection."]}),"\n",(0,a.jsxs)(n.li,{children:["Click on the edit icon of ",(0,a.jsx)(n.code,{children:"genres"}),". Deselect ",(0,a.jsx)(n.code,{children:"id"}),", This is a child relationship of ",(0,a.jsx)(n.code,{children:"bookGenres"}),", and we'll merge these fields into the parent, to avoid too much unneccesary nesting."]}),"\n",(0,a.jsxs)(n.li,{children:["Click ",(0,a.jsx)(n.code,{children:"Save and close"}),"."]}),"\n",(0,a.jsxs)(n.li,{children:["Click on the edit icon of the ",(0,a.jsx)(n.code,{children:"book_genre"})," embedded array."]}),"\n",(0,a.jsxs)(n.li,{children:["Change the field name from ",(0,a.jsx)(n.code,{children:"bookGenres"})," to ",(0,a.jsx)(n.code,{children:"genres"}),"."]}),"\n",(0,a.jsxs)(n.li,{children:["Uncheck ",(0,a.jsx)(n.code,{children:"bookId"})," and ",(0,a.jsx)(n.code,{children:"genreId"}),"."]}),"\n",(0,a.jsxs)(n.li,{children:["Click ",(0,a.jsx)(n.code,{children:"Save and close"}),"."]}),"\n"]}),"\n",(0,a.jsx)(i.Z,{url:"http://127.0.0.1:8278",src:"img/160-image-001.png",alt:"Changes in the books collection"})]})}function p(e={}){let{wrapper:n}={...(0,t.a)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(h,{...e})}):h(e)}},600:function(e,n,o){o.d(n,{Z:()=>i});var s=o("5893");function a(e){let n=e.url||"http://localhost:3000";return(0,s.jsxs)("div",{className:"browser container",children:[(0,s.jsxs)("div",{className:"row",children:[(0,s.jsxs)("div",{className:"column left",children:[(0,s.jsx)("span",{className:"dot",style:{background:"#ED594A"}}),(0,s.jsx)("span",{className:"dot",style:{background:"#FDD800"}}),(0,s.jsx)("span",{className:"dot",style:{background:"#5AC05A"}})]}),(0,s.jsx)("div",{className:"column middle",children:(0,s.jsx)("input",{type:"text",value:n})}),(0,s.jsx)("div",{className:"column right",children:(0,s.jsxs)("div",{style:{float:"right"},children:[(0,s.jsx)("span",{className:"bar"}),(0,s.jsx)("span",{className:"bar"}),(0,s.jsx)("span",{className:"bar"})]})})]}),(0,s.jsx)("div",{className:"content",children:e.children})]})}o("7294");var t=o("3187");function i(e){return(0,s.jsx)(a,{...e,children:(0,s.jsx)("img",{src:(0,t.ZP)(e.src),alt:e.alt})})}},65:function(e,n,o){o.d(n,{Z:function(){return r},a:function(){return i}});var s=o(7294);let a={},t=s.createContext(a);function i(e){let n=s.useContext(t);return s.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:i(e.components),s.createElement(t.Provider,{value:n},e.children)}}}]);