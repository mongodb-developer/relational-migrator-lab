"use strict";(self.webpackChunkrelational_migrator_lab=self.webpackChunkrelational_migrator_lab||[]).push([["4517"],{7306:function(e,r,t){t.r(r),t.d(r,{metadata:()=>n,contentTitle:()=>l,default:()=>h,assets:()=>c,toc:()=>d,frontMatter:()=>i});var n=JSON.parse('{"id":"Generate code/testing-queries","title":"\uD83E\uDDB8 Testing Converted Queries","description":"You have already imported and converted your source queries, stored procedures or views into MongoDB queries.","source":"@site/docs/220-Generate code/40-testing-queries.mdx","sourceDirName":"220-Generate code","slug":"/Generate code/testing-queries","permalink":"/relational-migrator-lab/docs/Generate code/testing-queries","draft":false,"unlisted":false,"editUrl":"https://github.com/mongodb-developer/relational-migrator-lab/blob/main/docs/220-Generate code/40-testing-queries.mdx","tags":[],"version":"current","sidebarPosition":40,"frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"\uD83D\uDC50 Convert Views and Stored Procedures","permalink":"/relational-migrator-lab/docs/Generate code/convert-sprocs"},"next":{"title":"\uD83C\uDFAF Summary","permalink":"/relational-migrator-lab/docs/summary"}}'),o=t("5893"),s=t("65"),a=t("1424");let i={},l="\uD83E\uDDB8 Testing Converted Queries",c={},d=[{value:"Prerequisite",id:"prerequisite",level:2},{value:"Executing queries for comparison",id:"executing-queries-for-comparison",level:2}];function u(e){let r={a:"a",code:"code",h1:"h1",h2:"h2",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",...(0,s.a)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(r.header,{children:(0,o.jsx)(r.h1,{id:"-testing-converted-queries",children:"\uD83E\uDDB8 Testing Converted Queries"})}),"\n",(0,o.jsx)(r.p,{children:"You have already imported and converted your source queries, stored procedures or views into MongoDB queries.\nRelation Migrator allows you to go a step further, and verify the converted query by allowing you to compare results from the source query and converted query."}),"\n",(0,o.jsx)(r.h2,{id:"prerequisite",children:"Prerequisite"}),"\n",(0,o.jsxs)(r.ol,{children:["\n",(0,o.jsxs)(r.li,{children:["\n",(0,o.jsxs)(r.p,{children:["In order for Relational Migrator to run converted queries, you need to first ",(0,o.jsx)(r.a,{href:"https://www.mongodb.com/docs/relational-migrator/code-generation/query-converter/test-converted-queries/install-query-runner/",children:"install and run Query Runner"}),"."]}),"\n"]}),"\n",(0,o.jsxs)(r.li,{children:["\n",(0,o.jsxs)(r.p,{children:["The MongoDB query will be executed on your actual MongoDB database, so you must have completed ",(0,o.jsx)(r.a,{href:"https://mongodb-developer.github.io/relational-migrator-lab/docs/Migrate%20Data/migration",children:"migrating your data"}),"."]}),"\n"]}),"\n",(0,o.jsxs)(r.li,{children:["\n",(0,o.jsxs)(r.p,{children:["If you source data resides in the ",(0,o.jsx)(r.code,{children:"public"})," schema in your PostgreSQL database, you may skip this step. Otherwise, you will need to add your source data schema into PostgreSQL's search path in order for the queries execute properly."]}),"\n",(0,o.jsxs)(r.p,{children:["Go to ",(0,o.jsx)(r.strong,{children:"Manage Connections"}),":"]}),"\n",(0,o.jsx)(a.Z,{url:"https://www.mongodb.com/products/tools/relational-migrator",src:"img/testing-queries-001.png",alt:"Screenshot to manage connection"}),"\n",(0,o.jsxs)(r.p,{children:["Edit your ",(0,o.jsx)(r.strong,{children:"JDBC URI"})," to include the search path. For example, if your source schema is ",(0,o.jsx)(r.code,{children:"library"}),", add ",(0,o.jsx)(r.code,{children:"options=-c%20search_path%3Dlibrary"})," as a query parameter to your URI:"]}),"\n",(0,o.jsx)(a.Z,{url:"https://www.mongodb.com/products/tools/relational-migrator",src:"img/testing-queries-002.png",alt:"Screenshot to add search path"}),"\n",(0,o.jsxs)(r.p,{children:["Click ",(0,o.jsx)(r.strong,{children:"Save"})," and you can use the browser's ",(0,o.jsx)(r.strong,{children:"back button"})," to navigate back to the Query Converter page."]}),"\n"]}),"\n",(0,o.jsxs)(r.li,{children:["\n",(0,o.jsx)(r.p,{children:"After which, you may expand the test query panel to begin executing your source query or converted query."}),"\n",(0,o.jsx)(a.Z,{url:"https://www.mongodb.com/products/tools/relational-migrator",src:"img/testing-queries-003.png",alt:"Screenshot to expand query test panel"}),"\n"]}),"\n"]}),"\n",(0,o.jsx)(r.h2,{id:"executing-queries-for-comparison",children:"Executing queries for comparison"}),"\n",(0,o.jsxs)(r.ol,{children:["\n",(0,o.jsxs)(r.li,{children:["Select the source query you want to test on the left pane. As an example, we will select the ",(0,o.jsx)(r.code,{children:"get_books_by_genre"})," stored procedure."]}),"\n",(0,o.jsx)(r.li,{children:"Convert the query to a MongoDB query if you have not done so, but note that the converted query may not always be correct."}),"\n",(0,o.jsxs)(r.li,{children:["If it is a stored procedure, you will need to replace the placeholder parameter with a test value. In this example, we will replace it with ",(0,o.jsx)(r.code,{children:"'Literature'"}),".","\n",(0,o.jsx)(a.Z,{url:"https://www.mongodb.com/products/tools/relational-migrator",src:"img/testing-queries-004.png",alt:"Screenshot to show placeholder replacement"}),"\n"]}),"\n",(0,o.jsxs)(r.li,{children:["Click ",(0,o.jsx)(r.strong,{children:"RUN SOURCE QUERY"})," and ",(0,o.jsx)(r.strong,{children:"RUN CONVERTED QUERY"})," to execute the queries and  compare the results.","\n",(0,o.jsx)(a.Z,{url:"https://www.mongodb.com/products/tools/relational-migrator",src:"img/testing-queries-005.png",alt:"Screenshot to show result comparison"}),"\n"]}),"\n",(0,o.jsxs)(r.li,{children:["If the query results are different, check your MongoDB query. In this example, your MongoDB query should look like:","\n",(0,o.jsx)(r.pre,{children:(0,o.jsx)(r.code,{className:"language-js",children:"    async function get_books_by_genre(db, genre_param) {\n    const result = await db.collection('books').aggregate([\n        {\n            $match: {\n                'genre': genre_param\n            }\n        },\n        {\n            $project: {\n                title: 1\n            }\n        }\n    ]).toArray();\n        return result;\n    }\n"})}),"\n","Also check that any changes your made to your MongoDB query are saved."]}),"\n"]})]})}function h(e={}){let{wrapper:r}={...(0,s.a)(),...e.components};return r?(0,o.jsx)(r,{...e,children:(0,o.jsx)(u,{...e})}):u(e)}},1424:function(e,r,t){t.d(r,{Z:()=>a});var n=t("5893");function o(e){let r=e.url||"http://localhost:3000";return(0,n.jsxs)("div",{className:"browser container",children:[(0,n.jsxs)("div",{className:"row",children:[(0,n.jsxs)("div",{className:"column left",children:[(0,n.jsx)("span",{className:"dot",style:{background:"#ED594A"}}),(0,n.jsx)("span",{className:"dot",style:{background:"#FDD800"}}),(0,n.jsx)("span",{className:"dot",style:{background:"#5AC05A"}})]}),(0,n.jsx)("div",{className:"column middle",children:(0,n.jsx)("input",{type:"text",value:r})}),(0,n.jsx)("div",{className:"column right",children:(0,n.jsxs)("div",{style:{float:"right"},children:[(0,n.jsx)("span",{className:"bar"}),(0,n.jsx)("span",{className:"bar"}),(0,n.jsx)("span",{className:"bar"})]})})]}),(0,n.jsx)("div",{className:"content",children:e.children})]})}t("7294");var s=t("4757");function a(e){return(0,n.jsx)(o,{...e,children:(0,n.jsx)("img",{src:(0,s.ZP)(e.src),alt:e.alt})})}},65:function(e,r,t){t.d(r,{Z:function(){return i},a:function(){return a}});var n=t(7294);let o={},s=n.createContext(o);function a(e){let r=n.useContext(s);return n.useMemo(function(){return"function"==typeof e?e(r):{...r,...e}},[r,e])}function i(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:a(e.components),n.createElement(s.Provider,{value:r},e.children)}}}]);